/*
 關於java語言當中的方法
 	
 	1. 方法怎麼定義, 語法結構:
 		
 		[修飾符列表]	返回值類型	方法名 (形式參數列表){
 			方法體;
 		}
 	
 	2. 對以上的語法結構進行解釋說明:
 	
 		2.1. 關於修飾符列表
 			可選項,  不是必須的
 			
 			目前統一寫成: public static
 			方法的修飾符列表當中有static關鍵字的話, 怎麼掉用這個方法?
 				類名.方法名(實際參數列表) ;
 		
 		2.2. 返回值類型
 			
 			甚麼是返回值
 				一個方法可以完成某個特定功能的, 這個功能結束大多數都是需要
 				返回最終執行結果, 執行結果可能是一個具體存在的數據. 而這個具體
 				存在的數據就是返回值,
 			
 			 返回值類型
 			 	返回值是一個具體存在的數據, 數據都是有類型的, 此處需要指定的是返回值
 			 	的具體類型.
 			 
 			 返回值類型都可以指定哪些類型
 			 	java任一種類型都可以, 包括基本數據類型和所有的引用數據類型
 			
 			 也可能這個方法執行結束後不返回任何數據, java中規定, 當一個方法執行結束
 			 不返回任何數據的話, 返回值類型位置必須編寫void關鍵字
 			 
 			 返回值類型可以是:
 			 	byte,short,int,long,float,double,boolean,char,String,void....
 			 	
 			 返回值類型若不是void, 表示這個方法執行結束之後必須返回一個具體數值.
 			 當方法執行結束後沒有返回任何數據的話, 報錯. 怎麼返回值
 			 "return 值; ", 並且要求"值"的數據必須和"方法的返回值類型一致, 不然報錯.
 			 
 			 返回值類型是void的時候, 在方法體當中不能編寫"return 值; "這樣的語句, 可以編寫
 			 "return;"這樣的語句
 			 
 			 只要帶有return關鍵字的語句執行, return語句所在的方法結束. [不是JVM結束, 是所在的方法結束]
 				
 		2.3 方法名:
 			只要是合法的標誌符
 			方法名最好見名知意
 			方法名最好是動詞
 			方法名首字母要求小寫, 後面每個單字首字母大寫
 			
 		2.4  形式參數列表, 簡稱形參
 				形參是局部變數: int a; double b; float c; String s; .....
 				形參的個數可以是: 0~N個
 				多個形參之間用"逗號" 隔開
 				形參中起決定性作用的是形參的數據類型, 形參的名字就是局部變數的名字.
 				方法在調用的時候, 實際給這個方法傳遞的真實數據被稱為: 實際參數, 簡稱實參
 				實參列表和形參列表必須滿足:
 					數量相同
 					類型對應相同
 			  例如:
 			  	public static int sum(int a,int b){ //(int a,int b)是形參列表
 			  	}
 			  	方法調用
 			  	sum("abc","def"); 報錯
 			  	sum(10,20); 通過 //(10,20)是實參列表
 		
 		2.5 方法體必須由大括號括起來, 方法體當中的代碼有順序, 遵循自上而下的順序依次執行,
 		並且方法體由java語句構成, 每個java語句以分號結尾
 
 	3. 方法怎麼調用
 		方法只定義不去調用時不會執行的, 只有在調用的時候才會執行
 		語法規則:	 <方法的修飾符列表當中有static>
 			類名.方法名(實參列表);  <這是一條java語句, 表示調用某個類的某個方法傳遞這樣的參數>
 
 
 */
//public 公開的
//class 表示定義類
//MethodTest02是一個類名
public class MethodTest02 {	//表示定義一個公開的類, 起名MethodTest02, 由於是公開的類, 所以原文件名必須是: MethodTest02.java
	
	//類體
	//類體中不能直接編寫java語句, 除聲明變數之外
	//類體方法出現在類體當中
	
	//方法
	//public 公開的
	//static 靜態的
	//void表示方法執行結束後不返回任何數據
	//main 是方法名: 主方法
	//(String[] args): 形式參數列表, 其中String[]是一種引用類型, args是一個局部變數的變數名
	//所以以下只有args這個局部變數的變數名是隨意的
	//main主方法就需要這樣固定編寫, 這是程序的入口
	public static void main(String[] args) {
		
		//這裡的程序是一定會執行的
		//main方法是JVM負責調用, 是一個入口位置
		//從這裡做為一個起點開始執行程序
		//既然是這樣, 我們可以在這裡編寫java語句來調用其他方法
		//調用方法和語法
		//調用MethodTest02的sum方法,  傳遞兩個實參
		
		
		MethodTest02.sum(10, 20); //(10, 20) 實參列表 [實際上執行到這裡main方法暫停了, 進入sum方法執行, sum方法執行結束之後表示main方法的第107行結束]
		
		//注意: 方法體中的代碼是有順序, 遵循自上而下的順序依次執行
		//第107行的程序執行不結束, 無法結束第108行的程序.
		
		//一個方法可以被重複調用
		int a =100;
		MethodTest02.sum(a,500); //(a,500) 實參列表
		
		//再次調用方法
		int k = 90;
		int f = 10;
		MethodTest02.sum(k, f); //(k,f) 實參列表
	}
	
	//自定義方法, 非程序入口
	//方法作用: 計算兩個int類型數據的和, 不要求返回結果, 但是要求將結果直接輸出到控制台
	//修飾符列表: public static
	//返回值類型: void
	//方法名: sum
	//形式參數列表: (int x,int y)
	//方法體: 主要任務是求和之後輸出計算結果
	public static void sum(int x,int y) { //(int x, int y)形參列表
		System.out.println(x + "+" + y + "=" + (x + y));
		
	}

}