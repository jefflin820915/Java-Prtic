//用戶測試類
//對於現在程序來說: User類中的age屬性在外部程序中可以隨意訪問, 導致age屬性的不安全
//一個User對象表示一個用戶, 用戶的年齡不可能為負數,以下程序當中年齡值
//為負數,程序進行的時候並沒有報錯,這當前程序存在的缺陷.

//面向對象包括三大特徵: 
	//封裝
	//繼承
	//多態

//當前講封裝的機制
//封裝的好處:
	//1.封裝之後,對於事物來說,看不到這個事物比較複雜的那一面,只能看到該事物簡單的那一面
	//複雜性封裝,對外提供簡單的操作入口.照相機是一個很好的案例,照相機的實現原理非常複雜
	//但對於使用者來說操作起來非常方便非常便捷.還有像電視機也是封裝的,電視機
	//內存實現非常複雜,但是對於使用者來說不需要關心內部原理,只需要會操作遙控器就行

	//2.封裝之後才會形成真正的"對象",真正的"獨立體"

	//3.封裝就意味著以後的程序可以重複使用,並且這個事物應該適應性比較強,在任何場合都可以使用
	
	//4.封裝之後, 對於事物本身,提高了安全性[安全級別高]


public class User02Test {

	public static void main(String[] args) {

		// 創建user對象
		User02 user = new User02();

		// 訪問age
		// 讀取年齡值[get]
		System.out.println("該用戶年齡: " + user.age);

		// 修改年齡值[set]
		user.age = 20;
		
		//讀取年齡值[get]
		System.out.println("該用戶年齡: " + user.age);
		
		//修改年齡值[set]
		//這裡的age屬性完全暴露給外部程序的,對程序員來說可以操作User對象當中所有細節,導致User中數據不安全
		//建議User類型進行封裝,建議在外部程序中不能隨意訪問User對象中的屬性.這樣可以保證屬性的安全
		user.age = -100;
		
		//讀取年齡值[get]
		System.out.println("該用戶年齡: " + user.age);
		
	}

}
