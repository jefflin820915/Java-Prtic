/*
 	方法在執行過程當中, 在JVM中的內存是如何分配, 內存是如何變化的
 		1. 方法只定義不調用,是不會執行的, 並且在JVM也不會給該方法"運行所屬"的內存空間
 		只有在調用這個方法的時候, 才會動態的給這個方法分配所屬的內存空間
 		
 		2. 在JVM內存畫分上有這樣"三塊主要的內存(當然除了這三塊,還有其他內存):
 			方法區內存
 			推內存
 			棧內存
 		
 		3. 關於棧數據結構:
 			棧: stack, 是一種數據結構
 			數據結構反應的是數據的存儲的型態
 			數據結構是獨立的學科, 不屬於任何編程語言的範疇, 只不過大多數編程語言中要使用數據結構
 			作為程序員需要提前精通: 數據結構 + 算法 [計算機專業必修]
 			常見的數據結構:
 				數組
 				隊列
 				棧
 				鏈表
 				二叉樹
 				哈希表/散列表
 				....
 		
 		4. 方法代碼片段存在哪裡? 方法執行的時候執行過程的內存在哪裡分配
 			方法代碼片段屬於.class文件的一部分, 在類加載的時候
 			將其放到方法區中, 所以JVM中三塊主要內存空間中方法區內存最先有
 			數據,存放了代碼片段
 			
 			代碼片段雖然在方法區內存只有一份, 但是可以被重複調用
 			每一次用這個方法的時候, 需要給該方法分配獨立的活動場所, 
 			在棧內存中分配. [棧內存中分配方法運行的所屬內存空間]
 			
 		5. 方法在調用的瞬間,  會給該方法分配獨立的內存空間, 在棧分配空間, 此時會在棧中發生
 		壓棧動作, 方法執行結束後, 給該方法分配的內存空間全部釋放, 此時發生彈棧動作
 			壓棧: 給該方法分配內存
 			彈棧: 釋放該方法的內存空間
 			
 		6. 局部變數在運行階段內存在棧中分配, 局部變數在"方法體"中聲明
 */
public class MethodTest10 {
	public static void main(String[] args) {
		
		
		
	}

}
