/*
 * 多態在實際開發的作用,以下以主人餵養寵物為例說明多態的作用
 * 1. 分析:主人餵養寵物這個場景要實現需要進行類型的抽象:
 * 		-主人[類]
 * 		-主人可以餵養寵物,所以主人有餵養的動作
 * 		-寵物[類]
 * 		-寵物可以吃東西,所以寵物有吃東西的動作
 * 2. 面向對象編程的核心: 定義好類,然後將類實例化為對象,給一個環境驅使一下,讓各個對象之間協作起來形成一個系統
 
 * 3. 多態的作用是甚麼?
 * 		降低程序的耦合度,提高程序的擴展力
 * 		能使用多態盡量使用多態
 * 		父類型引用指向子類型對象
 * 
 * 
 * 核心: 面向抽象編程,盡量不要面向具體編程
 *
 */
public class Test08 {
	public static void main(String[] args) {
		//創建主人對象
		Owner02 ow = new Owner02();
		
		//創建貓對象
		//Cat03 c = new Cat03();
		
		//主人餵養貓
		//ow.feed(c);
		ow.feed(new Cat03());
	
		//創建狗對象
		//Dog d = new Dog();
		
		//主人餵小狗
		//ow.feed(d);
		ow.feed(new Dog());
		
		//創建蛇對象
		Snack snack = new Snack();
		//主人餵養
			ow.feed(snack);
	}
}
